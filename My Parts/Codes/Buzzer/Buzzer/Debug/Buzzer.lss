
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000de  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000010d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000738  00000000  00000000  0000012d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004e9  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bb  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000196  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  00000086  00000086  000000da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.main    0000001a  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#include <avr/io.h>

int main()
{
	DDRC = 0xff; //Makes PORTC as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x00; //Makes PORTA as Input to get signal from Ultrasonic sensor
  70:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xff; // Enable The PullUps of PORTA.
  72:	8b bb       	out	0x1b, r24	; 27
	while(1)
	{
		if(PINA==0x01) // Read the signal from Ultrasonic sensor and Turn ON/OFF the Buzzer
  74:	89 b3       	in	r24, 0x19	; 25
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	11 f4       	brne	.+4      	; 0x7e <main+0x12>
		{
			PORTC=0x01;
  7a:	85 bb       	out	0x15, r24	; 21
  7c:	01 c0       	rjmp	.+2      	; 0x80 <main+0x14>
		}
		else
		{
			PORTC=0x00;
  7e:	15 ba       	out	0x15, r1	; 21
		}
	return 0;
}
}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret
